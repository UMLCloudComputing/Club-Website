"use strict";(self.webpackChunkumlcloudcomputing=self.webpackChunkumlcloudcomputing||[]).push([[9041],{2900:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=i(4848),o=i(8453);const a={sidebar_position:2,slug:"/activities/part-2-frontend-development-and-integration/2-designing-user-interface"},r="Designing the User Interface",l={id:"activities/PhotoSky/Part 2: Frontend Development and Integration/designing-user-interface",title:"Designing the User Interface",description:"In this section, we'll design and implement the user interface for our PhotoSky application. We'll create a responsive layout using Material-UI components and implement the main features of our app: displaying images, uploading new images, and managing the image gallery. We'll also integrate a notification system using the notistack library.",source:"@site/docs/activities/PhotoSky/Part 2: Frontend Development and Integration/2-designing-user-interface.md",sourceDirName:"activities/PhotoSky/Part 2: Frontend Development and Integration",slug:"/activities/part-2-frontend-development-and-integration/2-designing-user-interface",permalink:"/docs/activities/part-2-frontend-development-and-integration/2-designing-user-interface",draft:!1,unlisted:!1,editUrl:"https://github.com/UMLCloudComputing/UMLCloudComputing.github.io/edit/main/docs/activities/PhotoSky/Part 2: Frontend Development and Integration/2-designing-user-interface.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/activities/part-2-frontend-development-and-integration/2-designing-user-interface"},sidebar:"activitiesSidebar",previous:{title:"Introduction to React, Material-UI, and Additional Libraries",permalink:"/docs/activities/part-2-frontend-development-and-integration/1-introduction-to-react-and-material-ui"},next:{title:"State Management in React",permalink:"/docs/activities/part-2-frontend-development-and-integration/3-state-management-in-react"}},s={},c=[{value:"Overview of the PhotoSky UI",id:"overview-of-the-photosky-ui",level:2},{value:"Setting Up Dependencies",id:"setting-up-dependencies",level:2},{value:"Implementing the Main App Component",id:"implementing-the-main-app-component",level:2},{value:"Implementing the AppBar",id:"implementing-the-appbar",level:2},{value:"Creating the Image Gallery",id:"creating-the-image-gallery",level:2},{value:"Implementing the Bottom Navigation",id:"implementing-the-bottom-navigation",level:2},{value:"Adding Dialogs for Image Actions",id:"adding-dialogs-for-image-actions",level:2},{value:"Implementing the Notification System",id:"implementing-the-notification-system",level:2},{value:"Handling Loading States",id:"handling-loading-states",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"designing-the-user-interface",children:"Designing the User Interface"})}),"\n",(0,t.jsx)(n.p,{children:"In this section, we'll design and implement the user interface for our PhotoSky application. We'll create a responsive layout using Material-UI components and implement the main features of our app: displaying images, uploading new images, and managing the image gallery. We'll also integrate a notification system using the notistack library."}),"\n",(0,t.jsx)(n.h2,{id:"overview-of-the-photosky-ui",children:"Overview of the PhotoSky UI"}),"\n",(0,t.jsx)(n.p,{children:"Our PhotoSky application will have the following main components:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"AppBar with the application logo, title, theme toggle, and options menu"}),"\n",(0,t.jsx)(n.li,{children:"Image Gallery to display uploaded images"}),"\n",(0,t.jsx)(n.li,{children:"Bottom Navigation for key actions"}),"\n",(0,t.jsx)(n.li,{children:"Dialogs for image upload, camera capture, and image viewing"}),"\n",(0,t.jsx)(n.li,{children:"Notification system for user feedback"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Let's implement these components step by step."}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-dependencies",children:"Setting Up Dependencies"}),"\n",(0,t.jsxs)(n.p,{children:["First, ensure you have all the necessary dependencies installed. Your ",(0,t.jsx)(n.code,{children:"package.json"})," should include:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"dependencies": {\n  "@emotion/react": "^11.13.3",\n  "@emotion/styled": "^11.13.0",\n  "@mui/icons-material": "^6.0.1",\n  "@mui/material": "^6.0.1",\n  "notistack": "^3.0.1",\n  // ... other dependencies\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"If any of these are missing, install them using npm:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install @emotion/react @emotion/styled @mui/material @mui/icons-material notistack\n"})}),"\n",(0,t.jsx)(n.h2,{id:"implementing-the-main-app-component",children:"Implementing the Main App Component"}),"\n",(0,t.jsxs)(n.p,{children:["Let's update our ",(0,t.jsx)(n.code,{children:"App.js"})," file to create the basic structure of our application:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport axios from 'axios';\nimport { useSnackbar, SnackbarProvider } from 'notistack';\nimport { Camera, CameraResultType } from '@capacitor/camera';\n\n// Import necessary Material-UI components and icons\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport IconButton from '@mui/material/IconButton';\nimport Box from '@mui/material/Box';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport DarkModeIcon from '@mui/icons-material/DarkMode';\nimport LightModeIcon from '@mui/icons-material/LightMode';\nimport SettingsBrightnessIcon from '@mui/icons-material/SettingsBrightness';\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\n\nfunction Album() {\n  // State variables will be defined here\n  \n  // Theme setup\n  const theme = createTheme({\n    palette: {\n      mode: themeMode === 'system' ? (isDarkMode ? 'dark' : 'light') : themeMode,\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {/* AppBar component will go here */}\n      <main>\n        {/* Main content will go here */}\n      </main>\n      {/* Bottom Navigation will go here */}\n    </ThemeProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <SnackbarProvider maxSnack={3} autoHideDuration={4000} anchorOrigin={{ vertical: 'top', horizontal: 'left' }}>\n      <Album />\n    </SnackbarProvider>\n  );\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This sets up our basic app structure with Material-UI's ",(0,t.jsx)(n.code,{children:"ThemeProvider"})," and ",(0,t.jsx)(n.code,{children:"SnackbarProvider"})," for notifications."]}),"\n",(0,t.jsx)(n.h2,{id:"implementing-the-appbar",children:"Implementing the AppBar"}),"\n",(0,t.jsx)(n.p,{children:"Now, let's create the AppBar with the logo, title, theme toggle, and options menu:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"<AppBar position=\"relative\">\n  <Toolbar>\n    <Box sx={{ display: 'flex', alignItems: 'center' }}>\n      <img src=\"/PhotoSky.png\" alt=\"PhotoSky Logo\" style={{ width: 40, height: 40, marginRight: '16px' }} />\n    </Box>\n    <Typography variant=\"h6\" color=\"inherit\" noWrap>\n      PhotoSky\n    </Typography>\n    <Tooltip title=\"Toggle Theme Mode\">\n      <IconButton edge=\"end\" color=\"inherit\" onClick={handleToggleThemeMode} sx={{ marginLeft: 'auto', mr: 1 }}>\n        {themeMode === 'dark' ? <DarkModeIcon /> : themeMode === 'light' ? <LightModeIcon /> : <SettingsBrightnessIcon />}\n      </IconButton>\n    </Tooltip>\n    <IconButton color=\"inherit\" onClick={handleMenuOpen}>\n      <MoreVertIcon />\n    </IconButton>\n    <Menu\n      anchorEl={menuAnchorEl}\n      open={Boolean(menuAnchorEl)}\n      onClose={handleMenuClose}\n    >\n      <MenuItem onClick={() => { handleDeleteAllImages(); handleMenuClose(); }}>\n        Delete All Images\n      </MenuItem>\n      <MenuItem onClick={() => { handleMenuClose(); setThemeMode('light'); setIsDarkMode(false); }}>\n        Switch to Light Theme\n      </MenuItem>\n      <MenuItem onClick={() => { handleMenuClose(); setThemeMode('dark'); setIsDarkMode(true); }}>\n        Switch to Dark Theme\n      </MenuItem>\n      <MenuItem onClick={() => { handleMenuClose(); setThemeMode('system'); }}>\n        Switch to System Theme\n      </MenuItem>\n    </Menu>\n  </Toolbar>\n</AppBar>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-the-image-gallery",children:"Creating the Image Gallery"}),"\n",(0,t.jsx)(n.p,{children:"Now, let's implement the Image Gallery component:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"<Container sx={{ py: 8 }} maxWidth=\"md\">\n  {loading && <LinearProgress />}\n  {images.length > 0 ? (\n    <ImageList sx={{ width: '100%', height: 'auto' }} cols={3} rowHeight={164}>\n      {images.map((image) => (\n        <ImageListItem key={image.id} onClick={() => handleOpenDialog(image)}>\n          <img\n            src={image.url}\n            alt={`${image.id}`}\n            loading=\"lazy\"\n            style={{ cursor: 'pointer', width: '100%', height: 'auto' }}\n          />\n        </ImageListItem>\n      ))}\n    </ImageList>\n  ) : (\n    <Box\n      sx={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: 'lightgrey',\n        height: '200px',\n        borderRadius: '8px',\n        color: 'grey',\n      }}\n    >\n      No images found, upload images to see them here.\n    </Box>\n  )}\n</Container>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"implementing-the-bottom-navigation",children:"Implementing the Bottom Navigation"}),"\n",(0,t.jsx)(n.p,{children:"Add the Bottom Navigation component:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'<Paper sx={{ position: \'fixed\', bottom: 0, left: 0, right: 0 }} elevation={5}>\n  <BottomNavigation value={navValue} onChange={(event, newValue) => setNavValue(newValue)}>\n    <BottomNavigationAction showLabel label="Refresh" icon={<RefreshIcon />} onClick={fetchImages} />\n    <BottomNavigationAction showLabel label="Gallery" icon={<AppsIcon />} />\n    <BottomNavigationAction showLabel label="Add Image" icon={<UploadIcon />} onClick={handleOpenCameraDialog} />\n  </BottomNavigation>\n</Paper>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"adding-dialogs-for-image-actions",children:"Adding Dialogs for Image Actions"}),"\n",(0,t.jsx)(n.p,{children:"Let's add dialogs for image viewing, deletion, and upload:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'{/* Image Viewer Dialog */}\n<Dialog open={dialogOpen} onClose={handleCloseDialog} fullWidth>\n  <DialogTitle>Image Viewer</DialogTitle>\n  <DialogContent>\n    {selectedImage && (\n      <img src={selectedImage.url} alt="Selected" style={{ width: \'100%\' }} />\n    )}\n    <DialogContentText>Do you want to delete this image?</DialogContentText>\n  </DialogContent>\n  <DialogActions>\n    <Button onClick={() => handleDeleteImage(selectedImage.id)} color="error">\n      <DeleteIcon /> Delete\n    </Button>\n    <Button onClick={handleCloseDialog}>Close</Button>\n  </DialogActions>\n</Dialog>\n\n{/* Image Upload Dialog */}\n<Dialog open={imageDialogOpen} onClose={() => setImageDialogOpen(false)} fullWidth>\n  <DialogTitle>Select Image or Take Picture</DialogTitle>\n  <DialogActions>\n    <Stack direction="column" spacing={2} width="100%">\n      <Button onClick={handleAddImage} color="primary" width="100%">\n        Select Image\n      </Button>\n      <Button onClick={takePicture} color="primary" width="100%">\n        Take Picture\n      </Button>\n      <Button onClick={() => setImageDialogOpen(false)} color="error" width="100%">\n        Cancel\n      </Button>\n    </Stack>\n  </DialogActions>\n</Dialog>\n'})}),"\n",(0,t.jsx)(n.h2,{id:"implementing-the-notification-system",children:"Implementing the Notification System"}),"\n",(0,t.jsxs)(n.p,{children:["We're using the ",(0,t.jsx)(n.code,{children:"notistack"})," library for our notification system. It's already set up in our main ",(0,t.jsx)(n.code,{children:"App"})," component with ",(0,t.jsx)(n.code,{children:"SnackbarProvider"}),". To use it in our ",(0,t.jsx)(n.code,{children:"Album"})," component, we use the ",(0,t.jsx)(n.code,{children:"useSnackbar"})," hook:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"const { enqueueSnackbar } = useSnackbar();\n\n// Example usage in a function:\nconst handleSomeAction = () => {\n  try {\n    // Perform some action\n    enqueueSnackbar('Action performed successfully', { variant: 'success' });\n  } catch (error) {\n    enqueueSnackbar('Error performing action', { variant: 'error' });\n  }\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"This allows us to show notifications for various actions throughout our application, providing feedback to the user."}),"\n",(0,t.jsx)(n.h2,{id:"handling-loading-states",children:"Handling Loading States"}),"\n",(0,t.jsxs)(n.p,{children:["To handle loading states, we've added a ",(0,t.jsx)(n.code,{children:"LinearProgress"})," component that appears when the ",(0,t.jsx)(n.code,{children:"loading"})," state is true:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"{loading && <LinearProgress />}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Place this line at the top of your main content area to show a loading bar when operations are in progress."}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"We've now designed and implemented the basic user interface for our PhotoSky application. We have:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Created a responsive layout using Material-UI components"}),"\n",(0,t.jsx)(n.li,{children:"Implemented an AppBar with logo, title, theme toggle, and options menu"}),"\n",(0,t.jsx)(n.li,{children:"Created an image gallery to display uploaded images"}),"\n",(0,t.jsx)(n.li,{children:"Added a bottom navigation bar for key actions"}),"\n",(0,t.jsx)(n.li,{children:"Implemented dialogs for image viewing, deletion, and upload"}),"\n",(0,t.jsx)(n.li,{children:"Set up a notification system for user feedback"}),"\n",(0,t.jsx)(n.li,{children:"Added loading indicators for better user experience"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This UI provides a solid foundation for our application, offering a clean and intuitive interface for users to interact with their images. In the next section, we'll dive into state management to make our UI interactive and functional."})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(6540);const o={},a=t.createContext(o);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);