"use strict";(self.webpackChunkumlcloudcomputing=self.webpackChunkumlcloudcomputing||[]).push([[5282],{8167:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var s=t(4848),i=t(8453);const a={sidebar_position:4,slug:"/activities/part-1-aws-infrastructure-and-backend/4-implementing-aws-cdk-stack"},r="Implementing AWS CDK Stack",c={id:"activities/PhotoSky/Part 1: AWS Infrastructure and Backend/implementing-aws-cdk-stack",title:"Implementing AWS CDK Stack",description:"In this section, we'll implement the backend infrastructure we designed using AWS CDK (Cloud Development Kit). We'll go through the process step-by-step, explaining each part of the code and how it relates to our architecture.",source:"@site/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/4-implementing-aws-cdk-stack.md",sourceDirName:"activities/PhotoSky/Part 1: AWS Infrastructure and Backend",slug:"/activities/part-1-aws-infrastructure-and-backend/4-implementing-aws-cdk-stack",permalink:"/docs/activities/part-1-aws-infrastructure-and-backend/4-implementing-aws-cdk-stack",draft:!1,unlisted:!1,editUrl:"https://github.com/UMLCloudComputing/UMLCloudComputing.github.io/edit/main/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/4-implementing-aws-cdk-stack.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,slug:"/activities/part-1-aws-infrastructure-and-backend/4-implementing-aws-cdk-stack"},sidebar:"activitiesSidebar",previous:{title:"Designing Backend Architecture",permalink:"/docs/activities/part-1-aws-infrastructure-and-backend/3-designing-backend-architecture"},next:{title:"Creating the Lambda Function",permalink:"/docs/activities/part-1-aws-infrastructure-and-backend/5-creating-lambda-function"}},o={},l=[{value:"Understanding AWS CDK",id:"understanding-aws-cdk",level:2},{value:"Setting Up the CDK Project",id:"setting-up-the-cdk-project",level:2},{value:"Implementing the PhotoSky Stack",id:"implementing-the-photosky-stack",level:2},{value:"Deploying the Stack",id:"deploying-the-stack",level:2},{value:"Updating the .env File",id:"updating-the-env-file",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"implementing-aws-cdk-stack",children:"Implementing AWS CDK Stack"})}),"\n",(0,s.jsx)(n.p,{children:"In this section, we'll implement the backend infrastructure we designed using AWS CDK (Cloud Development Kit). We'll go through the process step-by-step, explaining each part of the code and how it relates to our architecture."}),"\n",(0,s.jsx)(n.h2,{id:"understanding-aws-cdk",children:"Understanding AWS CDK"}),"\n",(0,s.jsx)(n.p,{children:"AWS CDK allows us to define cloud infrastructure using familiar programming languages. In our case, we're using Python. CDK synthesizes our Python code into a CloudFormation template, which is then used to provision the actual AWS resources."}),"\n",(0,s.jsx)(n.h2,{id:"setting-up-the-cdk-project",children:"Setting Up the CDK Project"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"First, make sure you're in the project root directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd photosky\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Our CDK code will live in the ",(0,s.jsx)(n.code,{children:"cdk"})," directory. Let's navigate there:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd cdk\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Open ",(0,s.jsx)(n.code,{children:"photosky_stack.py"})," in your preferred text editor. This is where we'll define our stack."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"implementing-the-photosky-stack",children:"Implementing the PhotoSky Stack"}),"\n",(0,s.jsxs)(n.p,{children:["Let's break down the ",(0,s.jsx)(n.code,{children:"PhotoskyStack"})," class and implement it step by step:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"First, let's import the necessary modules:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from aws_cdk import (\n    Duration,\n    Stack,\n    RemovalPolicy,\n    aws_lambda as _lambda,\n    aws_s3 as s3,\n    aws_apigateway as apigateway,\n)\nfrom constructs import Construct\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Now, let's define our stack class:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class PhotoskyStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        # We'll add our resources here\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Let's add our Lambda function:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'dockerFunc = _lambda.DockerImageFunction(\n    scope=self,\n    id=f"ID{construct_id}",\n    function_name=construct_id,\n    environment= {\n        "BUCKET_NAME": f"{construct_id.lower()}"\n    },            \n    code=_lambda.DockerImageCode.from_image_asset(\n        directory="../src"\n    ),\n    timeout=Duration.seconds(300)\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This creates a Lambda function from a Docker image. The Docker image will be built from the ",(0,s.jsx)(n.code,{children:"Dockerfile"})," in the ",(0,s.jsx)(n.code,{children:"src"})," directory."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Next, let's create our API Gateway:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'api = apigateway.LambdaRestApi(self, "api",\n    handler=dockerFunc,\n    proxy=True,\n    default_cors_preflight_options={\n        "allow_origins": ["*"],\n        "allow_methods": apigateway.Cors.ALL_METHODS,\n        "allow_headers": ["*"],\n    }\n)\n'})}),"\n",(0,s.jsx)(n.p,{children:"This creates an API Gateway that proxies all requests to our Lambda function. It also sets up CORS to allow requests from any origin."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Now, let's create our S3 bucket:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'bucket = s3.Bucket(\n    self, \n    id=f"id{construct_id.lower()}", \n    bucket_name=f"{construct_id.lower()}",\n    cors=[s3.CorsRule(\n        allowed_methods=[s3.HttpMethods.GET, s3.HttpMethods.POST, s3.HttpMethods.PUT, s3.HttpMethods.DELETE],\n        allowed_origins=["*"],\n        allowed_headers=["*"],\n        exposed_headers=["ETag"],\n        max_age=3000\n    )],\n    removal_policy=RemovalPolicy.DESTROY,\n    auto_delete_objects=True\n)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This creates an S3 bucket with CORS configured to allow all methods from any origin. The ",(0,s.jsx)(n.code,{children:"removal_policy"})," and ",(0,s.jsx)(n.code,{children:"auto_delete_objects"})," parameters ensure the bucket will be deleted when we destroy our stack."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Finally, let's grant our Lambda function read/write access to the S3 bucket:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"bucket.grant_read_write(dockerFunc)\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Here's the complete ",(0,s.jsx)(n.code,{children:"PhotoskyStack"})," class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class PhotoskyStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        dockerFunc = _lambda.DockerImageFunction(\n            scope=self,\n            id=f"ID{construct_id}",\n            function_name=construct_id,\n            environment= {\n                "BUCKET_NAME": f"{construct_id.lower()}"\n            },            \n            code=_lambda.DockerImageCode.from_image_asset(\n                directory="../src"\n            ),\n            timeout=Duration.seconds(300)\n        )\n\n        api = apigateway.LambdaRestApi(self, "api",\n            handler=dockerFunc,\n            proxy=True,\n            default_cors_preflight_options={\n                "allow_origins": ["*"],\n                "allow_methods": apigateway.Cors.ALL_METHODS,\n                "allow_headers": ["*"],\n            }\n        )\n\n        bucket = s3.Bucket(\n            self, \n            id=f"id{construct_id.lower()}", \n            bucket_name=f"{construct_id.lower()}",\n            cors=[s3.CorsRule(\n                allowed_methods=[s3.HttpMethods.GET, s3.HttpMethods.POST, s3.HttpMethods.PUT, s3.HttpMethods.DELETE],\n                allowed_origins=["*"],\n                allowed_headers=["*"],\n                exposed_headers=["ETag"],\n                max_age=3000\n            )],\n            removal_policy=RemovalPolicy.DESTROY,\n            auto_delete_objects=True\n        )\n\n        bucket.grant_read_write(dockerFunc)\n'})}),"\n",(0,s.jsx)(n.h2,{id:"deploying-the-stack",children:"Deploying the Stack"}),"\n",(0,s.jsx)(n.p,{children:"Now that we've implemented our stack, let's deploy it:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"First, make sure you're in the project root directory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd ..\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Synthesize the CloudFormation template:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cdk synth\n"})}),"\n",(0,s.jsx)(n.p,{children:"This command will generate a CloudFormation template based on our CDK code."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Deploy the stack:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cdk deploy\n"})}),"\n",(0,s.jsx)(n.p,{children:"This command will deploy our stack to AWS. You'll be asked to confirm the changes before they're applied."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Once the deployment is complete, CDK will output the URL of your API Gateway. Save this URL as you'll need it for the frontend."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"updating-the-env-file",children:"Updating the .env File"}),"\n",(0,s.jsxs)(n.p,{children:["Now that we have our backend deployed, let's update our ",(0,s.jsx)(n.code,{children:".env"})," file with the API URL:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Open the ",(0,s.jsx)(n.code,{children:".env"})," file in the root directory of the project."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Find the ",(0,s.jsx)(n.code,{children:"REACT_APP_API_URL"})," line and update it with the API Gateway URL you saved earlier:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"REACT_APP_API_URL=https://{YOUR_API_ID}.execute-api.{YOUR_REGION}.amazonaws.com/prod\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Congratulations! You've successfully implemented and deployed the backend infrastructure for PhotoSky using AWS CDK. Here's what we've accomplished:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Created a Lambda function to handle our application logic"}),"\n",(0,s.jsx)(n.li,{children:"Set up an API Gateway to create a RESTful API"}),"\n",(0,s.jsx)(n.li,{children:"Created an S3 bucket for storing our images"}),"\n",(0,s.jsx)(n.li,{children:"Granted the necessary permissions for our Lambda function to interact with the S3 bucket"}),"\n",(0,s.jsx)(n.li,{children:"Deployed our infrastructure to AWS"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"In the next section, we'll dive into implementing the Lambda function that will handle our application logic."})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);