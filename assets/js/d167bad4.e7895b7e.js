"use strict";(self.webpackChunkumlcloudcomputing=self.webpackChunkumlcloudcomputing||[]).push([[5628],{5706:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=t(4848),r=t(8453);const a={sidebar_position:3},s="Designing Backend Architecture",o={id:"activities/PhotoSky/Part 1: AWS Infrastructure and Backend/designing-backend-architecture",title:"Designing Backend Architecture",description:"In this section, we'll dive into the backend architecture of our PhotoSky application. We'll explore the AWS services we're using, why we chose them, and how they work together to create a scalable, serverless backend.",source:"@site/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/3-designing-backend-architecture.md",sourceDirName:"activities/PhotoSky/Part 1: AWS Infrastructure and Backend",slug:"/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/designing-backend-architecture",permalink:"/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/designing-backend-architecture",draft:!1,unlisted:!1,editUrl:"https://github.com/UMLCloudComputing/UMLCloudComputing.github.io/edit/main/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/3-designing-backend-architecture.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"activitiesSidebar",previous:{title:"Setting Up Your AWS Environment",permalink:"/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/setting-up-aws-environment"},next:{title:"Implementing AWS CDK Stack",permalink:"/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/implementing-aws-cdk-stack"}},c={},l=[{value:"Overview of PhotoSky&#39;s Backend Architecture",id:"overview-of-photoskys-backend-architecture",level:2},{value:"Amazon S3 (Simple Storage Service)",id:"amazon-s3-simple-storage-service",level:2},{value:"AWS Lambda",id:"aws-lambda",level:2},{value:"Amazon API Gateway",id:"amazon-api-gateway",level:2},{value:"AWS CDK (Cloud Development Kit)",id:"aws-cdk-cloud-development-kit",level:2},{value:"Putting It All Together",id:"putting-it-all-together",level:2},{value:"Code Preview",id:"code-preview",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"designing-backend-architecture",children:"Designing Backend Architecture"})}),"\n",(0,i.jsx)(n.p,{children:"In this section, we'll dive into the backend architecture of our PhotoSky application. We'll explore the AWS services we're using, why we chose them, and how they work together to create a scalable, serverless backend."}),"\n",(0,i.jsx)(n.h2,{id:"overview-of-photoskys-backend-architecture",children:"Overview of PhotoSky's Backend Architecture"}),"\n",(0,i.jsx)(n.p,{children:"PhotoSky uses a serverless architecture built on AWS. Here's a high-level overview of our backend components:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Amazon S3 (Simple Storage Service)"}),": For storing images"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS Lambda"}),": For running our backend logic"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Amazon API Gateway"}),": For creating a RESTful API"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS CDK (Cloud Development Kit)"}),": For defining and provisioning our AWS infrastructure"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Let's explore each of these components in detail."}),"\n",(0,i.jsx)(n.h2,{id:"amazon-s3-simple-storage-service",children:"Amazon S3 (Simple Storage Service)"}),"\n",(0,i.jsx)(n.p,{children:"Amazon S3 is an object storage service that offers industry-leading scalability, data availability, security, and performance."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why S3 for PhotoSky?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Scalable storage: S3 can store virtually unlimited amounts of data."}),"\n",(0,i.jsx)(n.li,{children:"High durability and availability: S3 is designed for 99.999999999% (11 9's) of durability."}),"\n",(0,i.jsx)(n.li,{children:"Security: S3 offers strong encryption and access control mechanisms."}),"\n",(0,i.jsx)(n.li,{children:"Cost-effective: You only pay for what you use."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In our application, S3 will store all the images uploaded by users."}),"\n",(0,i.jsx)(n.h2,{id:"aws-lambda",children:"AWS Lambda"}),"\n",(0,i.jsx)(n.p,{children:"AWS Lambda is a serverless compute service that lets you run code without provisioning or managing servers."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Lambda for PhotoSky?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Serverless: No need to manage servers."}),"\n",(0,i.jsx)(n.li,{children:"Auto-scaling: Lambda automatically scales your application by running code in response to each trigger."}),"\n",(0,i.jsx)(n.li,{children:"Pay-per-use: You're only charged for the compute time you consume."}),"\n",(0,i.jsx)(n.li,{children:"Supports multiple programming languages: We're using Python for our Lambda functions."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In PhotoSky, Lambda functions will handle operations like generating presigned URLs for S3, creating image previews, and managing image metadata."}),"\n",(0,i.jsx)(n.h2,{id:"amazon-api-gateway",children:"Amazon API Gateway"}),"\n",(0,i.jsx)(n.p,{children:"Amazon API Gateway is a fully managed service that makes it easy for developers to create, publish, maintain, monitor, and secure APIs at any scale."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why API Gateway for PhotoSky?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"RESTful API creation: Easily create a RESTful API that our frontend can interact with."}),"\n",(0,i.jsx)(n.li,{children:"Integration with Lambda: Seamlessly connect our API endpoints to our Lambda functions."}),"\n",(0,i.jsx)(n.li,{children:"Security: Provides features like AWS IAM integration, CORS support, and more."}),"\n",(0,i.jsx)(n.li,{children:"Scalability: Can handle any number of API calls."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"API Gateway will serve as the entry point for our frontend, routing requests to the appropriate Lambda functions."}),"\n",(0,i.jsx)(n.h2,{id:"aws-cdk-cloud-development-kit",children:"AWS CDK (Cloud Development Kit)"}),"\n",(0,i.jsx)(n.p,{children:"While not a part of the runtime architecture, AWS CDK is crucial for defining and provisioning our infrastructure."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why CDK for PhotoSky?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Infrastructure as Code: Define cloud infrastructure using familiar programming languages (we're using Python)."}),"\n",(0,i.jsx)(n.li,{children:"Reusable components: Create and share reusable infrastructure components."}),"\n",(0,i.jsx)(n.li,{children:"AWS best practices: CDK encapsulates AWS best practices."}),"\n",(0,i.jsx)(n.li,{children:"Easy updates: Simplifies the process of updating and versioning our infrastructure."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"putting-it-all-together",children:"Putting It All Together"}),"\n",(0,i.jsx)(n.p,{children:"Here's how these components work together in PhotoSky:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The frontend sends requests to API Gateway endpoints."}),"\n",(0,i.jsx)(n.li,{children:"API Gateway routes these requests to the appropriate Lambda function."}),"\n",(0,i.jsxs)(n.li,{children:["Lambda functions perform operations, which may include:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Generating presigned URLs for S3 uploads/downloads"}),"\n",(0,i.jsx)(n.li,{children:"Creating image previews"}),"\n",(0,i.jsx)(n.li,{children:"Managing image metadata"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"S3 stores the actual image files."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Here's a diagram of this architecture:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"+----------+     +---------------+     +-----------------+\n| Frontend | --\x3e | API Gateway   | --\x3e | Lambda Function |\n+----------+     +---------------+     +-----------------+\n                                               |\n                                               v\n                                        +-------------+\n                                        | Amazon S3   |\n                                        +-------------+\n"})}),"\n",(0,i.jsx)(n.h2,{id:"code-preview",children:"Code Preview"}),"\n",(0,i.jsx)(n.p,{children:"Let's take a look at how we define this architecture using AWS CDK:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Excerpt from cdk/photosky_stack.py\nclass PhotoskyStack(Stack):\n    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:\n        super().__init__(scope, construct_id, **kwargs)\n\n        # Define the Lambda function\n        dockerFunc = _lambda.DockerImageFunction(\n            scope=self,\n            id=f"ID{construct_id}",\n            function_name=construct_id,\n            environment= {\n                "BUCKET_NAME": f"{construct_id.lower()}"\n            },            \n            code=_lambda.DockerImageCode.from_image_asset(\n                directory="src"\n            ),\n            timeout=Duration.seconds(300)\n        )\n\n        # Create API Gateway\n        api = apigateway.LambdaRestApi(self, "api",\n            handler=dockerFunc,\n            proxy=True,\n            default_cors_preflight_options={\n                "allow_origins": ["*"],\n                "allow_methods": apigateway.Cors.ALL_METHODS,\n                "allow_headers": ["*"],\n            }\n        )\n\n        # Create S3 bucket\n        bucket = s3.Bucket(\n            self, \n            id=f"id{construct_id.lower()}", \n            bucket_name=f"{construct_id.lower()}",\n            cors=[s3.CorsRule(\n                allowed_methods=[s3.HttpMethods.GET, s3.HttpMethods.POST, s3.HttpMethods.PUT, s3.HttpMethods.DELETE],\n                allowed_origins=["*"],\n                allowed_headers=["*"],\n                exposed_headers=["ETag"],\n                max_age=3000\n            )],\n            removal_policy=RemovalPolicy.DESTROY,\n            auto_delete_objects=True\n        )\n\n        # Grant Lambda function access to S3 bucket\n        bucket.grant_read_write(dockerFunc)\n'})}),"\n",(0,i.jsx)(n.p,{children:"This code defines our entire backend infrastructure:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"It creates a Lambda function, packaged as a Docker image."}),"\n",(0,i.jsx)(n.li,{children:"It sets up an API Gateway that proxies all requests to our Lambda function."}),"\n",(0,i.jsx)(n.li,{children:"It creates an S3 bucket for storing our images, with CORS configured."}),"\n",(0,i.jsx)(n.li,{children:"It grants the Lambda function read and write access to the S3 bucket."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"This serverless architecture provides a scalable, maintainable, and cost-effective backend for PhotoSky. By leveraging these AWS services, we can focus on building application features without worrying about infrastructure management."}),"\n",(0,i.jsx)(n.p,{children:"In the next section, we'll dive deeper into implementing this architecture using AWS CDK. We'll go through the CDK code in detail and deploy our backend to AWS."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var i=t(6540);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);