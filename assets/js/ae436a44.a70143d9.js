"use strict";(self.webpackChunkumlcloudcomputing=self.webpackChunkumlcloudcomputing||[]).push([[3485],{4829:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=t(4848),s=t(8453);const r={sidebar_position:5},a="Creating the Lambda Function",o={id:"activities/PhotoSky/Part 1: AWS Infrastructure and Backend/creating-lambda-function",title:"Creating the Lambda Function",description:"In this section, we'll implement the Lambda function that will handle our application logic for PhotoSky. This function will manage image uploads, retrievals, and deletions, interfacing with our S3 bucket and responding to API Gateway requests.",source:"@site/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/5-creating-lambda-function.md",sourceDirName:"activities/PhotoSky/Part 1: AWS Infrastructure and Backend",slug:"/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/creating-lambda-function",permalink:"/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/creating-lambda-function",draft:!1,unlisted:!1,editUrl:"https://github.com/UMLCloudComputing/UMLCloudComputing.github.io/edit/main/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/5-creating-lambda-function.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"activitiesSidebar",previous:{title:"Implementing AWS CDK Stack",permalink:"/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/implementing-aws-cdk-stack"},next:{title:"Deploying and Testing the Backend",permalink:"/docs/activities/PhotoSky/Part 1: AWS Infrastructure and Backend/deploying-and-testing-backend"}},d={},l=[{value:"Understanding the Role of Our Lambda Function",id:"understanding-the-role-of-our-lambda-function",level:2},{value:"Setting Up the Lambda Function",id:"setting-up-the-lambda-function",level:2},{value:"Implementing S3.py",id:"implementing-s3py",level:3},{value:"Implementing main.py",id:"implementing-mainpy",level:3},{value:"Understanding the Lambda Function",id:"understanding-the-lambda-function",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"creating-the-lambda-function",children:"Creating the Lambda Function"})}),"\n",(0,i.jsx)(n.p,{children:"In this section, we'll implement the Lambda function that will handle our application logic for PhotoSky. This function will manage image uploads, retrievals, and deletions, interfacing with our S3 bucket and responding to API Gateway requests."}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-role-of-our-lambda-function",children:"Understanding the Role of Our Lambda Function"}),"\n",(0,i.jsx)(n.p,{children:"Our Lambda function will serve as the backend for PhotoSky, handling several key operations:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Generating presigned URLs for S3 uploads and downloads"}),"\n",(0,i.jsx)(n.li,{children:"Listing images in the S3 bucket"}),"\n",(0,i.jsx)(n.li,{children:"Creating preview images"}),"\n",(0,i.jsx)(n.li,{children:"Deleting images from the S3 bucket"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"setting-up-the-lambda-function",children:"Setting Up the Lambda Function"}),"\n",(0,i.jsxs)(n.p,{children:["Our Lambda function is defined in two main files: ",(0,i.jsx)(n.code,{children:"main.py"})," and ",(0,i.jsx)(n.code,{children:"S3.py"}),". Let's implement these files step by step."]}),"\n",(0,i.jsx)(n.h3,{id:"implementing-s3py",children:"Implementing S3.py"}),"\n",(0,i.jsxs)(n.p,{children:["First, let's create the ",(0,i.jsx)(n.code,{children:"S3.py"})," file, which will contain our S3 utility class:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Navigate to the ",(0,i.jsx)(n.code,{children:"src/app"})," directory:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cd src/app\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create and open ",(0,i.jsx)(n.code,{children:"S3.py"})," in your text editor."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add the following code to ",(0,i.jsx)(n.code,{children:"S3.py"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import boto3\nimport logging\nfrom PIL import Image\nimport io\nfrom botocore.exceptions import ClientError\n\nclass S3:\n    def __init__(self, bucket_name):\n        self.client = boto3.client('s3')\n        self.bucket_name = bucket_name\n    \n    def object_exists(self, object_name):\n        try:\n            self.client.head_object(Bucket=self.bucket_name, Key=object_name)\n            return True\n        except ClientError:\n            return False\n\n    def create_preview_image(self, object_name, result_width=100, result_height=100):\n        try:\n            original_image = self.client.get_object(Bucket=self.bucket_name, Key=object_name)\n            image_data = original_image['Body'].read()\n            image = Image.open(io.BytesIO(image_data))\n\n            # Crop and resize logic\n            width, height = image.size\n            min_dimension = min(width, height)\n            left = (width - min_dimension) / 2\n            top = (height - min_dimension) / 2\n            right = (width + min_dimension) / 2\n            bottom = (height + min_dimension) / 2\n\n            cropped = image.crop((left, top, right, bottom))\n            preview_image = cropped.resize((result_width, result_height))\n\n            # Save the preview image\n            preview_image_bytes = io.BytesIO()\n            preview_image.save(preview_image_bytes, format=image.format)\n            preview_image_bytes.seek(0)\n\n            preview_object_name = f\"preview_{object_name}\"\n            self.client.put_object(Bucket=self.bucket_name, Key=preview_object_name, Body=preview_image_bytes)\n\n            return preview_object_name\n\n        except ClientError as e:\n            logging.error(e)\n            return None\n\n    def create_presigned_post(self, object_name, fields=None, conditions=None, expiration=3600):\n        try:\n            response = self.client.generate_presigned_post(\n                Bucket=self.bucket_name,\n                Key=object_name,\n                Fields=fields,\n                Conditions=conditions,\n                ExpiresIn=expiration\n            )\n            return response\n        except ClientError as e:\n            logging.error(e)\n            return None\n\n    def create_presigned_get(self, object_name, expiration=3600):\n        try:\n            response = self.client.generate_presigned_url(\n                'get_object',\n                Params={'Bucket': self.bucket_name, 'Key': object_name},\n                ExpiresIn=expiration\n            )\n            return response\n        except ClientError as e:\n            logging.error(e)\n            return None\n\n    def list_images(self):\n        try:\n            response = self.client.list_objects_v2(Bucket=self.bucket_name)\n            images = []\n            if 'Contents' in response:\n                for obj in response['Contents']:\n                    images.append({'id': obj['Key'], 'url': self.create_presigned_get(obj['Key'])})\n            return images\n        except ClientError as e:\n            logging.error(e)\n            return []\n\n    def delete_image(self, object_name):\n        try:\n            self.client.delete_object(Bucket=self.bucket_name, Key=object_name)\n        except ClientError as e:\n            logging.error(e)\n            return None\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.code,{children:"S3"})," class provides methods for interacting with our S3 bucket, including creating preview images, generating presigned URLs, listing images, and deleting images."]}),"\n",(0,i.jsx)(n.h3,{id:"implementing-mainpy",children:"Implementing main.py"}),"\n",(0,i.jsxs)(n.p,{children:["Now, let's implement ",(0,i.jsx)(n.code,{children:"main.py"}),", which will handle our API requests:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Create and open ",(0,i.jsx)(n.code,{children:"main.py"})," in your text editor."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Add the following code to ",(0,i.jsx)(n.code,{children:"main.py"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import json\nimport os\nfrom S3 import S3\n\ndef handler(event, context):\n    s3 = S3(os.getenv(\"BUCKET_NAME\"))\n    method = event['httpMethod']\n    path = event['path']\n\n    # CORS headers\n    headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type',\n        'Access-Control-Allow-Credentials': 'true'\n    }\n\n    # Handle CORS preflight requests\n    if method == 'OPTIONS':\n        return {\n            'statusCode': 200,\n            'headers': headers,\n            'body': json.dumps({'message': 'CORS preflight successful'})\n        }\n\n    # Handle GET /list-images\n    if method == 'GET' and path == '/list-images':\n        images = s3.list_images()\n        return {\n            'statusCode': 200,\n            'headers': headers,\n            'body': json.dumps({'images': images})\n        }\n\n    # Handle POST /get-presigned-url\n    elif method == 'POST' and path == '/get-presigned-url':\n        body = json.loads(event['body'])\n        filename = body.get('filename')\n        filetype = body.get('filetype')\n\n        if not filename or not filetype:\n            return {\n                'statusCode': 400,\n                'headers': headers,\n                'body': json.dumps({'message': 'Filename and filetype required'})\n            }\n\n        presigned_url = s3.create_presigned_post(filename, conditions=None)\n        if presigned_url:\n            return {\n                'statusCode': 200,\n                'headers': headers,\n                'body': json.dumps(presigned_url)\n            }\n        else:\n            return {\n                'statusCode': 500,\n                'headers': headers,\n                'body': json.dumps({'message': 'Error generating presigned URL'})\n            }\n\n    # Handle DELETE /delete-image/{filename}\n    elif method == 'DELETE' and path.startswith('/delete-image/'):\n        filename = path.split('/')[-1]\n\n        if not s3.object_exists(filename):\n            return {\n                'statusCode': 404,\n                'headers': headers,\n                'body': json.dumps({'message': 'File not found'})\n            }\n\n        s3.delete_image(filename)\n        return {\n            'statusCode': 200,\n            'headers': headers,\n            'body': json.dumps({'message': 'Image deleted successfully'})\n        }\n\n    # Handle GET /{filename} for downloading images and creating previews\n    elif method == 'GET':\n        query = event['queryStringParameters']\n        filename = path.lstrip('/')\n\n        if query and query.get('preview'):\n            if s3.object_exists(filename):\n                if not s3.object_exists(\"preview_\" + filename):\n                    print(\"Cache Miss\")\n                    s3.create_preview_image(filename)\n                filename = \"preview_\" + filename\n            else:\n                return {\n                    'statusCode': 404,\n                    'headers': headers,\n                    'body': json.dumps({'message': 'File not found'})\n                }\n\n        presigned_url = s3.create_presigned_get(filename)\n        if presigned_url:\n            return {\n                'statusCode': 200,\n                'headers': headers,\n                'body': json.dumps({'url': presigned_url})\n            }\n        else:\n            return {\n                'statusCode': 400,\n                'headers': headers,\n                'body': json.dumps({'message': 'Error generating presigned URL'})\n            }\n\n    # Fallback for unsupported paths/methods\n    return {\n        'statusCode': 404,\n        'headers': headers,\n        'body': json.dumps({'message': 'Not found'})\n    }\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.code,{children:"handler"})," function processes incoming API requests, interacts with the S3 bucket using our ",(0,i.jsx)(n.code,{children:"S3"})," class, and returns appropriate responses."]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-lambda-function",children:"Understanding the Lambda Function"}),"\n",(0,i.jsx)(n.p,{children:"Let's break down the main components of our Lambda function:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CORS Handling"}),": We set up CORS headers to allow cross-origin requests, which is necessary for our frontend to communicate with the API."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"List Images"}),": The ",(0,i.jsx)(n.code,{children:"/list-images"})," endpoint retrieves a list of all images in the S3 bucket."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Get Presigned URL"}),": The ",(0,i.jsx)(n.code,{children:"/get-presigned-url"})," endpoint generates a presigned URL for uploading an image to S3."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Delete Image"}),": The ",(0,i.jsx)(n.code,{children:"/delete-image/{filename}"})," endpoint deletes a specific image from the S3 bucket."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Get Image/Preview"}),": The ",(0,i.jsx)(n.code,{children:"GET /{filename}"})," endpoint retrieves a presigned URL for downloading an image. If the ",(0,i.jsx)(n.code,{children:"preview"})," query parameter is set, it creates and returns a preview image."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"We've now implemented the Lambda function that will serve as the backend for our PhotoSky application. This function handles all the necessary operations for managing images in our S3 bucket and provides the API that our frontend will interact with."}),"\n",(0,i.jsx)(n.p,{children:"In the next section, we'll deploy and test our backend to ensure everything is working correctly."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);